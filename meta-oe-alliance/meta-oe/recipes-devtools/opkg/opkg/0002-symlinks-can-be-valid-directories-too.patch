From 354644d396b2d8cd4010eab1b5496b80a6efa59f Mon Sep 17 00:00:00 2001
From: arn354 <arn354@email.de>
Date: Sat, 26 Oct 2019 17:24:25 +0200
Subject: [PATCH] opkg - update

 0002-symlinks-can-be-valid-directories-too.patch
 Relax_checks_for_existing_dirs_to_allow_symlinks_too Revert "opkg_install:
 Only allow identical symlinks if the target is a directory" Revert
 "opkg_install: Allow packages to provide the same symlink if it is identical"

---
 libopkg/file_list.c          | 10 ++----
 libopkg/file_list.h          |  3 +-
 libopkg/file_util.c          | 22 ------------
 libopkg/file_util.h          |  1 -
 libopkg/opkg_archive.c       |  7 +---
 libopkg/opkg_install.c       | 29 ++--------------
 libopkg/pkg.c                | 27 ++++-----------
 tests/Makefile               |  1 -
 tests/regress/issue11033b.py | 65 ------------------------------------
 9 files changed, 13 insertions(+), 152 deletions(-)
 delete mode 100644 tests/regress/issue11033b.py

diff --git a/libopkg/file_list.c b/libopkg/file_list.c
index 03c3c12..db18d11 100644
--- a/libopkg/file_list.c
+++ b/libopkg/file_list.c
@@ -25,11 +25,10 @@
 #include "file_list.h"
 #include "xfuncs.h"
 
-static int file_info_init(file_info_t *info, char *path, mode_t mode, char *link_target)
+static int file_info_init(file_info_t *info, char *path, mode_t mode)
 {
     info->path = xstrdup(path);
     info->mode = mode;
-    info->link_target = xstrdup(link_target);
 
     return 0;
 }
@@ -38,9 +37,6 @@ static void file_info_deinit(file_info_t *info)
 {
     free(info->path);
     info->path = NULL;
-
-    free(info->link_target);
-    info->link_target = NULL;
 }
 
 file_list_t *file_list_alloc()
@@ -71,11 +67,11 @@ void file_list_deinit(file_list_t *list)
     void_list_deinit((void_list_t *)list);
 }
 
-file_info_t *file_list_append(file_list_t *list, char *name, mode_t mode, char *link_target)
+file_info_t *file_list_append(file_list_t *list, char *name, mode_t mode)
 {
     /* freed in file_list_deinit */
     file_info_t *info = xcalloc(1, sizeof(file_info_t));
-    file_info_init(info, name, mode, link_target);
+    file_info_init(info, name, mode);
 
     void_list_append((void_list_t *)list, info);
 
diff --git a/libopkg/file_list.h b/libopkg/file_list.h
index d13e805..97dded3 100644
--- a/libopkg/file_list.h
+++ b/libopkg/file_list.h
@@ -29,7 +29,6 @@ extern "C" {
 typedef struct {
     char *path;
     mode_t mode;
-    char *link_target;
 } file_info_t;
 
 typedef struct void_list_elt file_list_elt_t;
@@ -45,7 +44,7 @@ file_list_t *file_list_alloc(void);
 void file_list_init(file_list_t *list);
 void file_list_deinit(file_list_t *list);
 
-file_info_t *file_list_append(file_list_t *list, char *name, mode_t mode, char *link_target);
+file_info_t *file_list_append(file_list_t *list, char *name, mode_t mode);
 void file_list_remove_elt(file_list_t * list, const char *path);
 
 file_list_elt_t *file_list_first(file_list_t *list);
diff --git a/libopkg/file_util.c b/libopkg/file_util.c
index ee9f59d..1c34483 100644
--- a/libopkg/file_util.c
+++ b/libopkg/file_util.c
@@ -96,28 +96,6 @@ int file_is_symlink(const char *file_name)
     return S_ISLNK(st.st_mode);
 }
 
-char *file_readlink_alloc(const char *file_name)
-{
-    struct stat st;
-    char *target;
-    ssize_t link_len;
-    int r;
-
-    r = xlstat(file_name, &st);
-    if (r == -1)
-        return NULL;
-
-    target = malloc(st.st_size + 1);
-    link_len = readlink(file_name, target, st.st_size);
-    if (link_len == -1) {
-        free(target);
-        return NULL;
-    }
-    target[link_len] = 0;
-
-    return target;
-}
-
 /* read a single line from a file, stopping at a newline or EOF.
    If a newline is read, it will appear in the resulting string.
    Return value is a malloc'ed char * which should be freed at
diff --git a/libopkg/file_util.h b/libopkg/file_util.h
index 2487649..c75fbbc 100644
--- a/libopkg/file_util.h
+++ b/libopkg/file_util.h
@@ -31,7 +31,6 @@ int xlstat(const char *file_name, struct stat *st);
 int file_exists(const char *file_name);
 int file_is_dir(const char *file_name);
 int file_is_symlink(const char *file_name);
-char *file_readlink_alloc(const char *file_name);
 char *file_read_line_alloc(FILE * file);
 int file_link(const char *src, const char *dest);
 int file_copy(const char *src, const char *dest);
diff --git a/libopkg/opkg_archive.c b/libopkg/opkg_archive.c
index f19cece..f8fcea7 100644
--- a/libopkg/opkg_archive.c
+++ b/libopkg/opkg_archive.c
@@ -344,12 +344,7 @@ static int extract_paths_to_stream(struct archive *a, FILE * stream)
 
         path = archive_entry_pathname(entry);
         entry_stat = archive_entry_stat(entry);
-        if (S_ISLNK(entry_stat->st_mode)) {
-            r = fprintf(stream, "%s\t%#03o\t%s\n", path, (unsigned int)entry_stat->st_mode,
-                        archive_entry_symlink(entry));
-        } else {
-            r = fprintf(stream, "%s\t%#03o\n", path, (unsigned int)entry_stat->st_mode);
-        }
+        r = fprintf(stream, "%s\t0%03o\n", path, (unsigned int)entry_stat->st_mode);
         if (r <= 0) {
             opkg_msg(ERROR, "Failed to path to stream: %s\n", strerror(errno));
             return -1;
diff --git a/libopkg/opkg_install.c b/libopkg/opkg_install.c
index 997d469..52ca780 100644
--- a/libopkg/opkg_install.c
+++ b/libopkg/opkg_install.c
@@ -452,9 +452,10 @@ static int check_data_file_clashes(pkg_t * pkg, pkg_t * old_pkg)
             pkg_t *owner;
             pkg_t *obs;
             int existing_is_dir = file_is_dir(filename);
+            int existing_is_lnk = file_is_symlink(filename);
 
             /* OK if both the existing file and new file are directories. */
-            if (existing_is_dir && S_ISDIR(file_info->mode)) {
+            if (existing_is_lnk || (existing_is_dir && S_ISDIR(file_info->mode))) {
                 continue;
             } else if (existing_is_dir || S_ISDIR(file_info->mode)) {
                 /* OK if existing file is a symlink to a directory and the new
@@ -494,32 +495,6 @@ static int check_data_file_clashes(pkg_t * pkg, pkg_t * old_pkg)
                 continue;
             }
 
-            /* OK if both the existing and new are a symlink and point to
-             * the same directory */
-            if (S_ISLNK(file_info->mode) && file_is_symlink(filename)) {
-                char *link_target;
-                int r, target_is_same_directory = 0;
-                struct stat target_stat;
-
-                link_target = file_readlink_alloc(filename);
-                r = strcmp(link_target, file_info->link_target);
-                free(link_target);
-
-                if (r == 0) {
-                    /* Ensure the target is a directory, not a file.
-                     * NOTE: This requires the directory to exist -- if this
-                     * is a broken symlink, it will be treated as a file and
-                     * be reported as a conflict. */
-                    link_target = realpath(filename, NULL);
-                    if (link_target && xlstat(link_target, &target_stat) == 0)
-                        target_is_same_directory = S_ISDIR(target_stat.st_mode);
-                    free(link_target);
-                }
-
-                if (target_is_same_directory)
-                    continue;
-            }
-
             if (backup_exists_for(filename)) {
                 continue;
             }
diff --git a/libopkg/pkg.c b/libopkg/pkg.c
index cec07fa..2a0fc1a 100644
--- a/libopkg/pkg.c
+++ b/libopkg/pkg.c
@@ -1189,22 +1189,17 @@ file_list_t *pkg_get_installed_files(pkg_t * pkg)
         char *file_name;
         char *mode_str;
         mode_t mode = 0;
-        char *link_target = NULL;
-        char *readlink_buf = NULL;
 
         line = file_read_line_alloc(list_file);
         if (line == NULL) {
             break;
         }
 
-        // <filename>\t<mode>\t<link_target> -- all fields except filename are optional
+        // <filename>\t<mode> -- all fields except filename are optional
         file_name = line;
         mode_str = strchr(line, '\t');
         if (mode_str) {
             *mode_str++ = 0;
-            link_target = strchr(mode_str, '\t');
-            if (link_target)
-                *link_target++ = 0;
             mode = (mode_t)strtoul(mode_str, NULL, 0);
         }
 
@@ -1228,14 +1223,11 @@ file_list_t *pkg_get_installed_files(pkg_t * pkg)
                 // already contains root_dir as header -> ABSOLUTE
                 sprintf_alloc(&installed_file_name, "%s", file_name);
             }
-            if (!mode && xlstat(installed_file_name, &file_stat) == 0)
+            if (xlstat(installed_file_name, &file_stat) == 0)
                 mode = file_stat.st_mode;
-            if (!link_target && S_ISLNK(mode))
-                link_target = readlink_buf = file_readlink_alloc(installed_file_name);
         }
-        file_list_append(pkg->installed_files, installed_file_name, mode, link_target);
+        file_list_append(pkg->installed_files, installed_file_name, mode);
         free(installed_file_name);
-        free(readlink_buf);
         free(line);
     }
 
@@ -1429,7 +1421,6 @@ static void pkg_write_filelist_helper(const char *key, void *entry_,
         char *installed_file_name;
         struct stat file_stat;
         mode_t mode = 0;
-        char *link_target = NULL;
         size_t size;
         int unmatched_offline_root = opkg_config->offline_root
                 && !str_starts_with(key, opkg_config->offline_root);
@@ -1449,19 +1440,13 @@ static void pkg_write_filelist_helper(const char *key, void *entry_,
 
         if (xlstat(installed_file_name, &file_stat) == 0) {
             mode = file_stat.st_mode;
-            if (S_ISLNK(mode))
-                link_target = file_readlink_alloc(installed_file_name);
         }
 
-        if (link_target)
-            fprintf(data->stream, "%s\t%#03o\t%s\n", entry, (unsigned int)mode, link_target);
-        else if (mode)
-            fprintf(data->stream, "%s\t%#03o\n", entry, (unsigned int)mode);
+        if (mode)
+            fprintf(data->stream, "%s\t%#03o\n", key, (unsigned int)mode);
         else
-            fprintf(data->stream, "%s\n", entry);
+            fprintf(data->stream, "%s\n", key);
 
-        free(entry);
-        free(link_target);
         free(installed_file_name);
     }
 }
diff --git a/tests/Makefile b/tests/Makefile
index 58e93de..52ebfaf 100644
--- a/tests/Makefile
+++ b/tests/Makefile
@@ -88,7 +88,6 @@ REGRESSION_TESTS := core/01_install.py \
 		    regress/issue10777.py \
 		    regress/issue10781.py \
 		    regress/issue11033.py \
-		    regress/issue11033b.py \
 		    regress/issue11826.py \
 		    regress/issue13574.py \
 		    regress/issue13758.py \
diff --git a/tests/regress/issue11033b.py b/tests/regress/issue11033b.py
deleted file mode 100644
index 217b584..0000000
--- a/tests/regress/issue11033b.py
+++ /dev/null
@@ -1,65 +0,0 @@
-#!/usr/bin/env python3
-# SPDX-License-Identifier: GPL-2.0-only
-
-import os
-import opk, cfg, opkgcl
-
-opk.regress_init()
-
-o = opk.OpkGroup()
-
-# Package A creates a symlink
-os.mkdir('lib64')
-os.symlink('lib64', 'lib')
-with open('static_file.txt', 'w') as f:
-    f.write('Test')
-pkg = opk.Opk(Package='a')
-pkg.write(data_files=['lib', 'lib64', 'static_file.txt'])
-o.addOpk(pkg)
-os.remove('static_file.txt')
-
-# Package B creates the same symlink
-pkg = opk.Opk(Package='b')
-pkg.write(data_files=['lib', 'lib64'])
-o.addOpk(pkg)
-os.remove('lib')
-os.rmdir('lib64')
-
-# Package C creates a different symlink
-os.mkdir('lib32')
-os.symlink('lib32', 'lib')
-pkg = opk.Opk(Package='c')
-pkg.write(data_files=['lib', 'lib32'])
-o.addOpk(pkg)
-os.remove('lib')
-os.rmdir('lib32')
-
-# Package D creates a symlink to a file (but doesn't include the file)
-os.symlink('static_file.txt', 'link.txt')
-pkg = opk.Opk(Package='d')
-pkg.write(data_files=['link.txt'])
-o.addOpk(pkg)
-
-# Package E creates the same file symlink
-pkg = opk.Opk(Package='e')
-pkg.write(data_files=['link.txt'])
-o.addOpk(pkg)
-os.remove('link.txt')
-
-o.write_list()
-
-opkgcl.update()
-
-opkgcl.install('a')
-opkgcl.install('b')
-if not opkgcl.is_installed('b'):
-    opk.fail("Package 'b' could not be installed")
-
-opkgcl.install('c')
-if opkgcl.is_installed('c'):
-    opk.fail("Package 'c' installed despite symlink conflict")
-
-opkgcl.install('d')
-opkgcl.install('e')
-if opkgcl.is_installed('e'):
-    opk.fail("Package 'e' installed despite symlink conflict")
