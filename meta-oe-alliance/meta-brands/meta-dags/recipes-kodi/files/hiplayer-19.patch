diff -uNr git/addons/resource.language.en_gb/resources/strings.po unlib/addons/resource.language.en_gb/resources/strings.po
--- git/addons/resource.language.en_gb/resources/strings.po	2021-03-17 10:31:55.589091546 +0800
+++ unlib/addons/resource.language.en_gb/resources/strings.po	2021-03-18 09:26:36.522870257 +0800
@@ -7247,6 +7247,17 @@
 #empty strings from id 13458 to 13459
 
 #: system/settings/settings.xml
+msgctxt "#13458"
+msgid "Allow hardware acceleration - HiPlayer"
+msgstr ""
+
+#. Description of setting with label #13457 "Allow hardware acceleration (HiPlayer)"
+#: system/settings/settings.xml
+msgctxt "#13459"
+msgid "Use HiPlayer for decoding of video files."
+msgstr ""
+
+#: system/settings/settings.xml
 msgctxt "#13460"
 msgid "Use HEVC VAAPI"
 msgstr ""
diff -uNr git/cmake/platform/linux/stb.cmake unlib/cmake/platform/linux/stb.cmake
--- git/cmake/platform/linux/stb.cmake	2021-03-17 10:31:55.637092070 +0800
+++ unlib/cmake/platform/linux/stb.cmake	2021-03-18 09:27:37.269771188 +0800
@@ -59,9 +59,8 @@
   list(APPEND DEPLIBS EGL GLESv2 v3dplatform)
 elseif(WITH_PLATFORM STREQUAL "clap-cortexa15")
   list(APPEND PLATFORM_DEFINES "-DTARGET_POSIX -DTARGET_LINUX -D_LINUX -DTARGET_STB -DTARGET_MALI -DUSE_HIPLAYER")
-#  list(APPEND DEPLIBS ${CMAKE_SOURCE_DIR}xbmc/cores/hiplayer/hiplayer.a ${CMAKE_SOURCE_DIR}xbmc/linux/hisi/hiadp.a)
-#  list(APPEND DEPLIBS EGL GLESv2 jpeg hi_common hi_msp)
-  list(APPEND DEPLIBS EGL GLESv2 jpeg)
+  list(APPEND DEPLIBS ${CMAKE_SOURCE_DIR}/xbmc/cores/hiplayer/hiplayer.a ${CMAKE_SOURCE_DIR}/xbmc/platform/linux/hisi/hiadp.a)
+  list(APPEND DEPLIBS EGL GLESv2 jpeg hi_common hi_msp)
 endif()
 
 
diff -uNr git/system/playercorefactory.xml unlib/system/playercorefactory.xml
--- git/system/playercorefactory.xml	2021-03-17 10:31:55.673092463 +0800
+++ unlib/system/playercorefactory.xml	2021-03-18 09:28:34.971214313 +0800
@@ -22,6 +22,8 @@
     <rule name="streams" internetstream="true">
       <rule name="aacp/sdp" mimetypes="audio/aacp|application/sdp" player="VideoPlayer" />
       <rule name="mp2" mimetypes="application/octet-stream" filetypes="mp2" player="PAPlayer" />
+      <rule name="widevine1" filetypes="mpd" player="VideoPlayer" />
+      <rule name="netflix" filename="*manifest*"  player="VideoPlayer" />
     </rule>
 
     <!-- DVDs -->
diff -uNr git/system/settings/settings.xml unlib/system/settings/settings.xml
--- git/system/settings/settings.xml	2021-03-17 10:31:55.677092508 +0800
+++ unlib/system/settings/settings.xml	2021-03-18 09:28:28.324940373 +0800
@@ -143,6 +143,12 @@
           <default>true</default>
           <control type="toggle" />
         </setting>
+	<setting id="videoplayer.usehiplayer" type="boolean" label="13458" help="13459">
+          <requirement>USE_HIPLAYER</requirement>
+          <level>2</level>
+          <default>true</default>
+          <control type="toggle" />
+        </setting>
         <setting id="winsystem.ishdrdisplay" type="boolean" label="13436" help="36299">
           <dependencies>
             <dependency type="visible">
diff -uNr git/xbmc/Application.cpp unlib/xbmc/Application.cpp
--- git/xbmc/Application.cpp	2021-03-17 10:31:55.697092726 +0800
+++ unlib/xbmc/Application.cpp	2021-03-18 09:30:04.276811463 +0800
@@ -473,6 +473,11 @@
             extready ? "ok" : "nok");
 #endif
 
+  std::string cmd("echo \"0\" > /proc/stb/vmpeg/0/enable");
+  system(cmd.c_str());
+  CLog::Log(LOGNOTICE,  "Hisi Clear Video backgroud: %s",cmd.c_str());
+  
+
 #if defined(__arm__) || defined(__aarch64__)
   if (CServiceBroker::GetCPUInfo()->GetCPUFeatures() & CPU_FEATURE_NEON)
     CLog::Log(LOGINFO, "ARM Features: Neon enabled");
@@ -4585,6 +4590,17 @@
   // if player has volume control, set it.
   m_appPlayer.SetVolume(m_volumeLevel);
   m_appPlayer.SetMute(m_muted);
+  
+  
+  int vol = m_muted?0:(int)(m_volumeLevel*100);
+  std::ostringstream sstreamer;
+  sstreamer << "echo ";
+  sstreamer << vol;
+  sstreamer << " > /proc/stb/avs/0/volume";
+  std::string cmd(sstreamer.str());
+  system(cmd.c_str());
+  
+  CLog::Log(LOGNOTICE, "Vol %d", vol);
 }
 
 int CApplication::GetSubtitleDelay()
diff -uNr git/xbmc/commons/ilog.h unlib/xbmc/commons/ilog.h
--- git/xbmc/commons/ilog.h	2021-03-17 10:31:55.705092813 +0800
+++ unlib/xbmc/commons/ilog.h	2021-03-18 09:28:44.556473342 +0800
@@ -21,6 +21,7 @@
 #define LOGERROR   3
 #define LOGFATAL   4
 #define LOGNONE    5
+#define LOGNOTICE  LOGINFO
 
 // extra masks - from bit 5
 #define LOGMASKBIT    5
diff -uNr git/xbmc/cores/hiplayer/HiPlayerAudio.h unlib/xbmc/cores/hiplayer/HiPlayerAudio.h
--- git/xbmc/cores/hiplayer/HiPlayerAudio.h	1970-01-01 08:00:00.000000000 +0800
+++ unlib/xbmc/cores/hiplayer/HiPlayerAudio.h	2020-03-24 10:26:05.529313800 +0800
@@ -0,0 +1,113 @@
+#pragma once
+
+/*
+ *      Copyright (C) 2005-2015 Team Kodi
+ *      http://kodi.tv
+ *
+ *  This Program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2, or (at your option)
+ *  any later version.
+ *
+ *  This Program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with Kodi; see the file COPYING.  If not, see
+ *  <http://www.gnu.org/licenses/>.
+ *
+ */
+
+#include <deque>
+#include <sys/types.h>
+
+#include "DVDStreamInfo.h"
+#include "threads/Thread.h"
+#include "IVideoPlayer.h"
+#include "DVDDemuxers/DVDDemux.h"
+#include "DVDMessageQueue.h"
+#include "utils/BitstreamStats.h"
+#include "cores/AudioEngine/Utils/AEAudioFormat.h"
+
+class CHiAudio;
+class CDVDAudioCodecHisi;
+
+class CHiPlayerAudio : public CThread, public IDVDStreamPlayerAudio
+{
+protected:
+  CDVDMessageQueue      m_messageQueue;
+  CDVDMessageQueue      &m_messageParent;
+
+  CDVDStreamInfo            m_hints_current;
+  CDVDStreamInfo            m_hints;
+  CDVDClock                 *m_av_clock;
+  CHiAudio                  *m_hisiAudio;
+  std::string               m_codec_name;
+  bool                      m_passthrough;
+  AEAudioFormat             m_format;
+  CDVDAudioCodecHisi        *m_pAudioCodec;
+  int                       m_speed;
+  bool                      m_silence;
+  double                    m_audioClock;
+  double                    m_start_pts ;
+
+  bool                      m_stalled;
+  IDVDStreamPlayer::ESyncState m_syncState;
+
+  BitstreamStats            m_audioStats;
+
+  bool                      m_buffer_empty;
+  bool                      m_flush;
+  bool                      m_DecoderOpen;
+
+  bool                      m_bad_state;
+  bool                      m_eos;
+  std::atomic_bool          m_bAbortOutput;
+	
+  virtual void OnStartup();
+  virtual void OnExit();
+  virtual void Process();
+  void OpenStream(CDVDStreamInfo &hints, CDVDAudioCodecHisi *codec);
+private:
+public:
+  CHiPlayerAudio(CDVDClock *av_clock, CDVDMessageQueue& parent, CProcessInfo &processInfo);
+  ~CHiPlayerAudio();
+  bool OpenStream(CDVDStreamInfo hints);
+  void SendMessage(CDVDMsg* pMsg, int priority = 0) { m_messageQueue.Put(pMsg, priority); }
+  void FlushMessages()                              { m_messageQueue.Flush(); }
+  bool AcceptsData() const                          { return !m_messageQueue.IsFull(); }
+  bool HasData() const                              ;
+  bool IsInited() const                             { return m_messageQueue.IsInited(); }
+  int  GetLevel() const                             { return m_messageQueue.GetLevel(); }
+  bool IsStalled() const                            { return m_stalled;  }
+  bool IsEOS();
+  void WaitForBuffers();
+  void CloseStream(bool bWaitForBuffers);
+  bool CodecChange();
+  bool Decode(DemuxPacket *pkt, bool bDropPacket, bool bTrickPlay);
+  void Flush(bool sync);
+  AEAudioFormat GetDataFormat(CDVDStreamInfo hints);
+  bool IsPassthrough() const;
+  bool OpenDecoder();
+  void CloseDecoder();
+  double GetDelay();
+  double GetCacheTime();
+  double GetCacheTotal();
+  double GetCurrentPts() { return m_audioClock; };
+  void SubmitEOS();
+
+  void SetDynamicRangeCompression(long drc)              {   }
+  float GetDynamicRangeAmplification() const             { return 0.0f; }
+  void SetSpeed(int iSpeed);
+  int  GetAudioBitrate();
+  int GetAudioChannels();
+  std::string GetPlayerInfo();
+
+  void SetVolume(float fVolume);
+  void SetMute(bool bOnOff);
+  
+  bool BadState() { return m_bad_state; }
+};
+
diff -uNr git/xbmc/cores/hiplayer/HiPlayerVideo.h unlib/xbmc/cores/hiplayer/HiPlayerVideo.h
--- git/xbmc/cores/hiplayer/HiPlayerVideo.h	1970-01-01 08:00:00.000000000 +0800
+++ unlib/xbmc/cores/hiplayer/HiPlayerVideo.h	2020-03-24 10:05:18.535154500 +0800
@@ -0,0 +1,136 @@
+#pragma once
+
+/*
+ *      Copyright (C) 2005-2013 Team XBMC
+ *      http://xbmc.org
+ *
+ *  This Program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2, or (at your option)
+ *  any later version.
+ *
+ *  This Program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with XBMC; see the file COPYING.  If not, see
+ *  <http://www.gnu.org/licenses/>.
+ *
+ */
+
+#include "threads/Thread.h"
+#include "IVideoPlayer.h"
+#include "DVDMessageQueue.h"
+#include "DVDStreamInfo.h"
+#include "DVDCodecs/Video/DVDVideoCodec.h"
+#include "DVDClock.h"
+#include "DVDOverlayContainer.h"
+//#include "DVDTSCorrection.h"
+#include "rendering/RenderSystem.h"
+#include "cores/VideoPlayer/VideoRenderers/RenderManager.h"
+#include "utils/BitstreamStats.h"
+#include "utils/BitstreamConverter.h"
+#include "utils/Geometry.h"
+#include <atomic>
+
+
+class CVideoBufferPoolHisi;
+class CDVDVideoCodecHisi;
+
+class CHiPlayerVideo : public CThread, public IDVDStreamPlayerVideo
+{
+public:
+  CHiPlayerVideo(CDVDClock* pClock
+                 ,CDVDOverlayContainer* pOverlayContainer
+                 ,CDVDMessageQueue& parent
+                 ,CRenderManager& renderManager,
+                 CProcessInfo &processInfo);
+  
+  virtual ~CHiPlayerVideo();
+
+  bool OpenStream(CDVDStreamInfo hint);
+  void CloseStream(bool bWaitForBuffers);
+
+  void Flush(bool sync);
+  bool AcceptsData() const { return !m_messageQueue.IsFull(); }
+  bool HasData() const ;
+  int  GetLevel() const { return m_messageQueue.GetLevel(); }
+  bool IsInited() const { return m_messageQueue.IsInited(); }
+  void SendMessage(CDVDMsg* pMsg, int priority = 0) { m_messageQueue.Put(pMsg, priority); }
+  void FlushMessages() { m_messageQueue.Flush(); }
+
+  void EnableSubtitle(bool bEnable) { m_bRenderSubs = bEnable; }
+  bool IsSubtitleEnabled() { return m_bRenderSubs; }
+  void EnableFullscreen(bool bEnable) { m_bAllowFullscreen = bEnable; }
+  double GetSubtitleDelay() { return m_iSubtitleDelay; }
+  void SetSubtitleDelay(double delay) { m_iSubtitleDelay = delay; }
+  bool IsStalled() const override { return m_stalled; }
+  bool IsRewindStalled() const override { return m_rewindStalled; }
+  double GetCurrentPts();
+  double GetOutputDelay(); /* returns the expected delay, from that a packet is put in queue */
+  int GetDecoderFreeSpace() { return 0; }
+  std::string GetPlayerInfo();
+  int GetVideoBitrate();
+  std::string GetStereoMode();
+  void SetSpeed(int iSpeed);
+	void	SubmitEOS();
+
+protected:
+  virtual void OnStartup();
+  virtual void OnExit();
+  virtual void Process();
+
+	
+	void OpenStream(CDVDStreamInfo &hint, CDVDVideoCodecHisi* codec);
+  void ProcessOverlays(double pts);
+	void ResolutionUpdateCallBack();
+	void Output(double pts, bool bDropPacket);
+	void SetVideoRect(const CRect &InSrcRect, const CRect &InDestRect);
+
+  CDVDStreamInfo m_hints;
+
+  std::shared_ptr<CVideoBufferPoolHisi> m_videoBufferPool;
+
+  int m_speed;
+
+  bool m_bRenderSubs;
+  bool m_bAllowFullscreen;
+  bool m_paused;
+  bool m_bFpsInvalid;        // needed to ignore fps (e.g. dvd stills)
+
+  float m_fForcedAspectRatio;
+	
+  double m_fFrameRate;       //framerate of the video currently playing
+  double m_iSubtitleDelay;
+
+  bool m_stalled;
+  std::atomic_bool m_rewindStalled;
+  std::atomic_bool m_bAbortOutput;
+	
+  BitstreamStats m_videoStats;
+	
+  CDVDMessageQueue  m_messageQueue;
+  CDVDMessageQueue& m_messageParent;
+  
+  CRenderManager& m_renderManager;
+
+  CDVDOverlayContainer  *m_pOverlayContainer;
+	
+	CBitstreamConverter *m_bitstream;
+
+  IDVDStreamPlayer::ESyncState m_syncState;
+
+	CDVDVideoCodecHisi * m_pVideoCodec;
+	
+  CRect                     m_src_rect;
+  CRect                     m_dst_rect;
+  RENDER_STEREO_MODE        m_video_stereo_mode;
+  RENDER_STEREO_MODE        m_display_stereo_mode;
+  bool                      m_StereoInvert;
+  double                    m_start_pts;
+
+  VideoPicture m_picture;
+};
+
diff -uNr git/xbmc/cores/VideoPlayer/VideoPlayer.cpp unlib/xbmc/cores/VideoPlayer/VideoPlayer.cpp
--- git/xbmc/cores/VideoPlayer/VideoPlayer.cpp	2021-03-17 10:31:55.713092901 +0800
+++ unlib/xbmc/cores/VideoPlayer/VideoPlayer.cpp	2021-03-18 09:29:24.464645591 +0800
@@ -64,6 +64,10 @@
 #include "Util.h"
 #include "LangInfo.h"
 #include "URL.h"
+#ifdef USE_HIPLAYER
+#include "cores/hiplayer/HiPlayerVideo.h"
+#include "cores/hiplayer/HiPlayerAudio.h"
+#endif
 
 #include "VideoPlayerAudio.h"
 #include "windowing/WinSystem.h"
@@ -571,11 +575,28 @@
 
 void CVideoPlayer::CreatePlayers()
 {
+#ifdef USE_HIPLAYER
+  if (m_hiplayer_mode && m_player_recreate)
+  {
+    DestroyPlayers();
+    m_player_recreate = false;
+  }
+#endif
+
   if (m_players_created)
     return;
 
-  m_VideoPlayerVideo = new CVideoPlayerVideo(&m_clock, &m_overlayContainer, m_messenger, m_renderManager, *m_processInfo);
-  m_VideoPlayerAudio = new CVideoPlayerAudio(&m_clock, m_messenger, *m_processInfo);
+#ifdef USE_HIPLAYER
+  if(m_hiplayer_mode && m_use_hicodec)
+  {
+	  m_VideoPlayerVideo = new CHiPlayerVideo(&m_clock, &m_overlayContainer, m_messenger, m_renderManager, *m_processInfo);
+	  m_VideoPlayerAudio = new CHiPlayerAudio(&m_clock, m_messenger, *m_processInfo);
+  }else
+#endif
+  {
+  	m_VideoPlayerVideo = new CVideoPlayerVideo(&m_clock, &m_overlayContainer, m_messenger, m_renderManager, *m_processInfo);
+  	m_VideoPlayerAudio = new CVideoPlayerAudio(&m_clock, m_messenger, *m_processInfo);
+	}
   m_VideoPlayerSubtitle = new CVideoPlayerSubtitle(&m_overlayContainer, *m_processInfo);
   m_VideoPlayerTeletext = new CDVDTeletextData(*m_processInfo);
   m_VideoPlayerRadioRDS = new CDVDRadioRDSData(*m_processInfo);
@@ -628,6 +649,14 @@
 
   memset(&m_SpeedState, 0, sizeof(m_SpeedState));
 
+#ifdef USE_HIPLAYER
+  m_hiplayer_mode                     = CServiceBroker::GetSettingsComponent()->GetSettings()->GetBool(CSettings::SETTING_VIDEOPLAYER_USEHIPLAYER);
+	m_use_hicodec 											= m_hiplayer_mode;
+	m_player_recreate										= false;
+#else
+  m_hiplayer_mode                     = false;
+#endif
+
   m_SkipCommercials = true;
 
   m_processInfo.reset(CProcessInfo::CreateInstance());
@@ -662,6 +691,75 @@
 {
   CLog::Log(LOGINFO, "VideoPlayer::OpenFile: %s", CURL::GetRedacted(file.GetPath()).c_str());
 
+#ifdef USE_HIPLAYER
+	if(m_hiplayer_mode)
+	{
+	  CLog::Log(LOGNOTICE, "VideoPlayer hiplayer checking decoder switch");
+	  if(m_use_hicodec &&
+	      !(file.IsType(".dts") ||file.IsType(".mp3")||file.IsType(".wav")||file.IsType(".wave")||file.IsType(".oga")
+	      ||file.IsType(".ogg")||file.IsType(".flac")||file.IsType(".m4a")||file.IsType(".mp2")||file.IsType(".m2a")
+	      ||file.IsType(".ac3")||file.IsType(".mka")||file.IsType(".aac")||file.IsType(".ape")||file.IsType(".alac")
+	      ||file.IsType(".mpg")||file.IsType(".vob")||file.IsType(".m4v")||file.IsType(".mkv")||file.IsType(".avi")
+	      ||file.IsType(".divx")||file.IsType(".dat")||file.IsType(".flv")||file.IsType(".mp4")||file.IsType(".mov")
+	      ||file.IsType(".wmv")||file.IsType(".rm")||file.IsType(".rmvb")||file.IsType(".ogm")||file.IsType(".ogv")
+	      ||file.IsType(".stream")||file.IsType(".amr")||file.IsType(".au")||file.IsType(".mid")||file.IsType(".wv")
+	      ||file.IsType(".pva")||file.IsType(".wtv")||file.IsType(".ts")||file.IsType(".m2ts")
+	      ))
+	  {		
+	    CLog::Log(LOGNOTICE, "find drm use, switch to default player");
+
+	    m_use_hicodec = false;
+
+      if (!IsRunning())
+      {
+        if(m_VideoPlayerVideo) delete m_VideoPlayerVideo;
+        if(m_VideoPlayerAudio) delete m_VideoPlayerAudio;
+          
+        m_renderManager.UnInit();
+        m_renderManager.PreInit();
+      
+        m_VideoPlayerVideo = new CVideoPlayerVideo(&m_clock, &m_overlayContainer, m_messenger, m_renderManager, *m_processInfo);
+        m_VideoPlayerAudio = new CVideoPlayerAudio(&m_clock, m_messenger, *m_processInfo);
+      }
+      else
+      {
+        m_player_recreate = true;
+      }
+	  }
+	  else if( !m_use_hicodec &&
+				  	(file.IsType(".dts") ||file.IsType(".mp3")||file.IsType(".wav")||file.IsType(".wave")||file.IsType(".oga")
+				      ||file.IsType(".ogg")||file.IsType(".flac")||file.IsType(".m4a")||file.IsType(".mp2")||file.IsType(".m2a")
+				      ||file.IsType(".ac3")||file.IsType(".mka")||file.IsType(".aac")||file.IsType(".ape")||file.IsType(".alac")
+				      ||file.IsType(".mpg")||file.IsType(".vob")||file.IsType(".m4v")||file.IsType(".mkv")||file.IsType(".avi")
+				      ||file.IsType(".divx")||file.IsType(".dat")||file.IsType(".flv")||file.IsType(".mp4")||file.IsType(".mov")
+				      ||file.IsType(".wmv")||file.IsType(".rm")||file.IsType(".rmvb")||file.IsType(".ogm")||file.IsType(".ogv")
+				      ||file.IsType(".stream")||file.IsType(".amr")||file.IsType(".au")||file.IsType(".mid")||file.IsType(".wv")
+				      ||file.IsType(".pva")||file.IsType(".wtv")||file.IsType(".ts")||file.IsType(".m2ts")
+				      ))
+	  {
+	  	CLog::Log(LOGNOTICE, "find no drm use, switch to hicodec");
+				
+	    m_use_hicodec = true;
+
+      if (!IsRunning())
+      {
+        if(m_VideoPlayerVideo) delete m_VideoPlayerVideo;
+        if(m_VideoPlayerAudio) delete m_VideoPlayerAudio;
+          
+        m_renderManager.UnInit();
+        m_renderManager.PreInit();
+      
+        m_VideoPlayerVideo = new CHiPlayerVideo(&m_clock, &m_overlayContainer, m_messenger, m_renderManager, *m_processInfo);
+        m_VideoPlayerAudio = new CHiPlayerAudio(&m_clock, m_messenger, *m_processInfo);
+      }
+      else
+      {
+        m_player_recreate = true;
+      }
+	  }
+	}
+#endif
+
   if (IsRunning())
   {
     CDVDMsgOpenFile::FileParams params;
@@ -1483,6 +1581,13 @@
         m_VideoPlayerVideo->SendMessage(new CDVDMsg(CDVDMsg::VIDEO_DRAIN));
       }
 
+      { // TODO: only used by OMXPlayer, find better solution
+        if (m_CurrentAudio.inited)
+          m_VideoPlayerAudio->SendMessage(new CDVDMsg(CDVDMsg::GENERAL_EOF));
+        if (m_CurrentVideo.inited)
+          m_VideoPlayerVideo->SendMessage(new CDVDMsg(CDVDMsg::GENERAL_EOF));
+      }
+      
       m_CurrentAudio.inited = false;
       m_CurrentVideo.inited = false;
       m_CurrentSubtitle.inited = false;
@@ -2511,6 +2616,15 @@
 
       FlushBuffers(DVD_NOPTS_VALUE, true, true);
       m_renderManager.Flush(false, false);
+
+#ifdef USE_HIPLAYER
+      if(m_hiplayer_mode && m_player_recreate)
+      {
+          m_renderManager.UnInit();
+          m_renderManager.PreInit();
+      }
+#endif
+
       SAFE_DELETE(m_pDemuxer);
       m_pSubtitleDemuxer.reset();
       m_subtitleDemuxerMap.clear();
diff -uNr git/xbmc/cores/VideoPlayer/VideoPlayer.h unlib/xbmc/cores/VideoPlayer/VideoPlayer.h
--- git/xbmc/cores/VideoPlayer/VideoPlayer.h	2021-03-17 10:31:55.713092901 +0800
+++ unlib/xbmc/cores/VideoPlayer/VideoPlayer.h	2021-03-18 09:29:30.045213427 +0800
@@ -541,4 +541,11 @@
   bool m_UpdateStreamDetails;
 
   std::atomic<bool> m_displayLost;
+  bool m_hiplayer_mode;				// using hiplayer acceleration
+#ifdef USE_HIPLAYER
+  bool m_use_hicodec;
+	bool m_player_recreate;
+  friend class CHiPlayerVideo;
+  friend class CHiPlayerAudio;
+#endif
 };
diff -uNr git/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/CMakeLists.txt unlib/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/CMakeLists.txt
--- git/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/CMakeLists.txt	2021-03-17 10:31:55.713092901 +0800
+++ unlib/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/CMakeLists.txt	2021-03-18 09:29:09.859919843 +0800
@@ -57,6 +57,9 @@
   endif()
 endif()
 
+list(APPEND SOURCES RendererHisi.cpp)
+list(APPEND HEADERS RendererHisi.h)
+
 # we might want to build on linux systems
 # with ENABLE_VDPAU=OFF and ENABLE_VAAPI=OFF
 if(SOURCES)
diff -uNr git/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererHisi.cpp unlib/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererHisi.cpp
--- git/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererHisi.cpp	1970-01-01 08:00:00.000000000 +0800
+++ unlib/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererHisi.cpp	2020-07-29 17:46:13.794168400 +0800
@@ -0,0 +1,165 @@
+/*
+ *  Copyright (C) 2007-2018 Team Kodi
+ *  This file is part of Kodi - https://kodi.tv
+ *
+ *  SPDX-License-Identifier: GPL-2.0-or-later
+ *  See LICENSES/README.md for more information.
+ */
+
+#include "RendererHisi.h"
+
+#include "utils/log.h"
+//#include "utils/SysfsUtils.h"
+#include "settings/MediaSettings.h"
+#include "cores/VideoPlayer/VideoRenderers/RenderCapture.h"
+#include "cores/VideoPlayer/VideoRenderers/RenderFactory.h"
+#include "cores/VideoPlayer/VideoRenderers/RenderFlags.h"
+#include "cores/VideoPlayer/Buffers/VideoBuffer.h"
+#include "cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodec.h"
+#include "settings/AdvancedSettings.h"
+
+class CVideoBufferHisi;
+
+CRendererHisi::CRendererHisi()
+ : m_prevVPts(-1)
+ , m_bConfigured(false)
+{
+  CLog::Log(LOGNOTICE, "Constructing CRendererHisi");
+}
+
+CRendererHisi::~CRendererHisi()
+{
+  Reset();
+}
+
+CBaseRenderer* CRendererHisi::Create(CVideoBuffer *buffer)
+{
+  if(buffer)
+  {
+      CLog::Log(LOGNOTICE, "CRendererHisi::Create in, buffer:");
+      //CLog::Log(LOGNOTICE, "format: %s", buffer->GetFormat());
+      //CLog::Log(LOGNOTICE, "id: %d", buffer->GetId());
+      if( AV_PIX_FMT_NONE != buffer->GetFormat())
+        return nullptr;
+  }
+
+  return new CRendererHisi();
+}
+
+bool CRendererHisi::Register()
+{
+  CLog::Log(LOGNOTICE, "CRendererHisi::Register");
+  VIDEOPLAYER::CRendererFactory::RegisterRenderer("hisi", CRendererHisi::Create);
+  return true;
+}
+
+bool CRendererHisi::Configure(const VideoPicture &picture, float fps, unsigned int orientation)
+{
+    CLog::Log(LOGNOTICE, "CRendererHisi::Configure");
+
+  m_sourceWidth = picture.iWidth;
+  m_sourceHeight = picture.iHeight;
+  m_renderOrientation = orientation;
+
+  m_iFlags = GetFlagsChromaPosition(picture.chroma_position) |
+             GetFlagsColorMatrix(picture.color_space, picture.iWidth, picture.iHeight) |
+             GetFlagsColorPrimaries(picture.color_primaries) |
+             GetFlagsStereoMode(picture.stereoMode);
+
+  // Calculate the input frame aspect ratio.
+  CalculateFrameAspectRatio(picture.iDisplayWidth, picture.iDisplayHeight);
+  SetViewMode(m_videoSettings.m_ViewMode);
+  ManageRenderArea();
+
+  m_bConfigured = true;
+
+  return true;
+}
+
+CRenderInfo CRendererHisi::GetRenderInfo()
+{
+  CRenderInfo info;
+  info.max_buffer_size = m_numRenderBuffers;
+  info.optimal_buffer_size = m_numRenderBuffers;
+  info.opaque_pointer = (void *)this;
+  return info;
+}
+
+bool CRendererHisi::RenderCapture(CRenderCapture* capture)
+{
+  capture->BeginRender();
+  capture->EndRender();
+  //CScreenshotAML::CaptureVideoFrame((unsigned char *)capture->GetRenderBuffer(), capture->GetWidth(), capture->GetHeight());
+  return true;
+}
+
+void CRendererHisi::AddVideoPicture(const VideoPicture &picture, int index)
+{
+
+  ReleaseBuffer(index);
+
+  BUFFER &buf(m_buffers[index]);
+  if (picture.videoBuffer)
+  {
+    buf.videoBuffer = picture.videoBuffer;
+    buf.videoBuffer->Acquire();
+  }
+}
+
+void CRendererHisi::ReleaseBuffer(int idx)
+{
+  BUFFER &buf(m_buffers[idx]);
+  if (buf.videoBuffer)
+  {
+    buf.videoBuffer->Release();
+    buf.videoBuffer = nullptr;
+  }
+}
+
+bool CRendererHisi::Supports(ERENDERFEATURE feature)
+{
+  if (feature == RENDERFEATURE_ZOOM ||
+      feature == RENDERFEATURE_CONTRAST ||
+      feature == RENDERFEATURE_BRIGHTNESS ||
+      feature == RENDERFEATURE_NONLINSTRETCH ||
+      feature == RENDERFEATURE_VERTICAL_SHIFT ||
+      feature == RENDERFEATURE_STRETCH ||
+      feature == RENDERFEATURE_PIXEL_RATIO ||
+      feature == RENDERFEATURE_ROTATION)
+    return true;
+
+  return false;
+}
+
+void CRendererHisi::Reset()
+{
+  m_prevVPts = -1;
+  for (int i = 0 ; i < m_numRenderBuffers ; ++i)
+  {
+    if (m_buffers[i].videoBuffer)
+    {
+      m_buffers[i].videoBuffer->Release();
+      m_buffers[i].videoBuffer = nullptr;
+    }
+  }
+}
+
+void CRendererHisi::RenderUpdate(int index, int index2, bool clear, unsigned int flags, unsigned int alpha)
+{
+  ManageRenderArea();
+
+/*
+  CVideoBufferHisi *amli = dynamic_cast<CVideoBufferHisi *>(m_buffers[index].videoBuffer);
+  if(amli && amli->m_amlCodec)
+  {
+    int pts = amli->m_omxPts;
+    if (pts != m_prevVPts)
+    {
+      amli->m_amlCodec->ReleaseFrame(amli->m_bufferIndex);
+      amli->m_amlCodec->SetVideoRect(m_sourceRect, m_destRect);
+      amli->m_amlCodec = nullptr; //Mark frame as processed
+      m_prevVPts = pts;
+    }
+  }
+  CAMLCodec::PollFrame();*/
+}
diff -uNr git/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererHisi.h unlib/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererHisi.h
--- git/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererHisi.h	1970-01-01 08:00:00.000000000 +0800
+++ unlib/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererHisi.h	2020-03-19 16:37:24.319710700 +0800
@@ -0,0 +1,56 @@
+/*
+ *  Copyright (C) 2007-2018 Team Kodi
+ *  This file is part of Kodi - https://kodi.tv
+ *
+ *  SPDX-License-Identifier: GPL-2.0-or-later
+ *  See LICENSES/README.md for more information.
+ */
+
+#pragma once
+
+#include "cores/VideoPlayer/VideoRenderers/BaseRenderer.h"
+
+class CRendererHisi : public CBaseRenderer
+{
+public:
+  CRendererHisi();
+  virtual ~CRendererHisi();
+
+  // Registration
+  static CBaseRenderer* Create(CVideoBuffer *buffer);
+  static bool Register();
+
+  virtual bool RenderCapture(CRenderCapture* capture) override;
+  virtual void AddVideoPicture(const VideoPicture &picture, int index) override;
+  virtual void ReleaseBuffer(int idx) override;
+  virtual bool Configure(const VideoPicture &picture, float fps, unsigned int orientation) override;
+  virtual bool IsConfigured() override { return m_bConfigured; };
+  virtual bool ConfigChanged(const VideoPicture &picture) { return false; };
+  virtual CRenderInfo GetRenderInfo() override;
+  virtual void UnInit() override {};
+  virtual void Update() override {};
+  virtual void RenderUpdate(int index, int index2, bool clear, unsigned int flags, unsigned int alpha) override;
+  virtual bool SupportsMultiPassRendering()override { return false; };
+
+  // Player functions
+  virtual bool IsGuiLayer() override { return false; };
+
+  // Feature support
+  virtual bool Supports(ESCALINGMETHOD method) override { return false; };
+  virtual bool Supports(ERENDERFEATURE feature) override;
+
+private:
+  void Reset();
+
+  static const int m_numRenderBuffers = 4;
+
+  struct BUFFER
+  {
+    BUFFER() : videoBuffer(nullptr) {};
+    CVideoBuffer *videoBuffer;
+    int duration;
+  } m_buffers[m_numRenderBuffers];
+
+  int m_prevVPts;
+  bool m_bConfigured;
+};
diff -uNr git/xbmc/platform/posix/PlatformDefs.h unlib/xbmc/platform/posix/PlatformDefs.h
--- git/xbmc/platform/posix/PlatformDefs.h	2021-03-17 10:31:55.741093207 +0800
+++ unlib/xbmc/platform/posix/PlatformDefs.h	2021-03-18 09:29:38.483982470 +0800
@@ -151,3 +151,5 @@
 
 #define FILE_READ_DATA   ( 0x0001 )
 #define FILE_WRITE_DATA  ( 0x0002 )
+
+typedef unsigned char BYTE;
\ No newline at end of file
diff -uNr git/xbmc/settings/SettingConditions.cpp unlib/xbmc/settings/SettingConditions.cpp
--- git/xbmc/settings/SettingConditions.cpp	2021-03-17 10:31:55.749093294 +0800
+++ unlib/xbmc/settings/SettingConditions.cpp	2021-03-18 09:30:09.405538279 +0800
@@ -374,6 +374,9 @@
 #ifdef HAS_ZEROCONF
   m_simpleConditions.insert("has_zeroconf");
 #endif
+#ifdef USE_HIPLAYER
+  m_simpleConditions.insert("use_hiplayer");
+#endif
 #ifdef HAVE_LIBVA
   m_simpleConditions.insert("have_libva");
 #endif
diff -uNr git/xbmc/settings/Settings.cpp unlib/xbmc/settings/Settings.cpp
--- git/xbmc/settings/Settings.cpp	2021-03-17 10:31:55.749093294 +0800
+++ unlib/xbmc/settings/Settings.cpp	2021-03-18 09:30:13.801069232 +0800
@@ -146,6 +146,7 @@
 constexpr const char* CSettings::SETTING_VIDEOPLAYER_USEVDPAUMPEG4;
 constexpr const char* CSettings::SETTING_VIDEOPLAYER_USEVDPAUVC1;
 constexpr const char* CSettings::SETTING_VIDEOPLAYER_USEDXVA2;
+constexpr const char* CSettings::SETTING_VIDEOPLAYER_USEHIPLAYER;
 constexpr const char* CSettings::SETTING_VIDEOPLAYER_USEVTB;
 constexpr const char* CSettings::SETTING_VIDEOPLAYER_USEPRIMEDECODER;
 constexpr const char* CSettings::SETTING_VIDEOPLAYER_USESTAGEFRIGHT;
diff -uNr git/xbmc/settings/Settings.h unlib/xbmc/settings/Settings.h
--- git/xbmc/settings/Settings.h	2021-03-17 10:31:55.749093294 +0800
+++ unlib/xbmc/settings/Settings.h	2021-03-18 09:30:18.259808003 +0800
@@ -124,6 +124,7 @@
   static constexpr auto SETTING_VIDEOPLAYER_USEVDPAUMPEG4 = "videoplayer.usevdpaumpeg4";
   static constexpr auto SETTING_VIDEOPLAYER_USEVDPAUVC1 = "videoplayer.usevdpauvc1";
   static constexpr auto SETTING_VIDEOPLAYER_USEDXVA2 = "videoplayer.usedxva2";
+  static constexpr auto SETTING_VIDEOPLAYER_USEHIPLAYER = "videoplayer.usehiplayer";
   static constexpr auto SETTING_VIDEOPLAYER_USEVTB = "videoplayer.usevtb";
   static constexpr auto SETTING_VIDEOPLAYER_USEPRIMEDECODER = "videoplayer.useprimedecoder";
   static constexpr auto SETTING_VIDEOPLAYER_USESTAGEFRIGHT = "videoplayer.usestagefright";
diff -uNr git/xbmc/windowing/egl/WinSystemSTBContext.cpp unlib/xbmc/windowing/egl/WinSystemSTBContext.cpp
--- git/xbmc/windowing/egl/WinSystemSTBContext.cpp	2021-03-17 10:31:55.761093425 +0800
+++ unlib/xbmc/windowing/egl/WinSystemSTBContext.cpp	2021-03-18 09:29:58.327695832 +0800
@@ -21,6 +21,8 @@
 #include "cores/VideoPlayer/VideoRenderers/LinuxRendererGL.h"
 #endif
 
+#include "cores/VideoPlayer/VideoRenderers/HwDecRender/RendererHisi.h"
+
 #include "cores/VideoPlayer/VideoRenderers/RenderFactory.h"
 #include "guilib/GUIComponent.h"
 #include "guilib/GUIWindowManager.h"
@@ -58,6 +60,7 @@
   VIDEOPLAYER::CRendererFactory::ClearRenderer();
 #ifdef HAS_GLES
   CLinuxRendererGLES::Register();
+  CRendererHisi::Register();
   RETRO::CRPProcessInfo::RegisterRendererFactory(new RETRO::CRendererFactoryOpenGLES);
 #else
   CLinuxRendererGL::Register();
